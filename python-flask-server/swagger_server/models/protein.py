# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class Protein(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(self, antibody_name: str=None, target_genes: List[str]=None, validation_status: str=None, company: str=None, catalog_number: str=None):  # noqa: E501
        """Protein - a model defined in Swagger

        :param antibody_name: The antibody_name of this Protein.  # noqa: E501
        :type antibody_name: str
        :param target_genes: The target_genes of this Protein.  # noqa: E501
        :type target_genes: List[str]
        :param validation_status: The validation_status of this Protein.  # noqa: E501
        :type validation_status: str
        :param company: The company of this Protein.  # noqa: E501
        :type company: str
        :param catalog_number: The catalog_number of this Protein.  # noqa: E501
        :type catalog_number: str
        """
        self.swagger_types = {
            'antibody_name': str,
            'target_genes': List[str],
            'validation_status': str,
            'company': str,
            'catalog_number': str
        }

        self.attribute_map = {
            'antibody_name': 'antibody_name',
            'target_genes': 'target_genes',
            'validation_status': 'validation_status',
            'company': 'company',
            'catalog_number': 'catalog_number'
        }

        self._antibody_name = antibody_name
        self._target_genes = target_genes
        self._validation_status = validation_status
        self._company = company
        self._catalog_number = catalog_number

    @classmethod
    def from_dict(cls, dikt) -> 'Protein':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The protein of this Protein.  # noqa: E501
        :rtype: Protein
        """
        return util.deserialize_model(dikt, cls)

    @property
    def antibody_name(self) -> str:
        """Gets the antibody_name of this Protein.


        :return: The antibody_name of this Protein.
        :rtype: str
        """
        return self._antibody_name

    @antibody_name.setter
    def antibody_name(self, antibody_name: str):
        """Sets the antibody_name of this Protein.


        :param antibody_name: The antibody_name of this Protein.
        :type antibody_name: str
        """

        self._antibody_name = antibody_name

    @property
    def target_genes(self) -> List[str]:
        """Gets the target_genes of this Protein.


        :return: The target_genes of this Protein.
        :rtype: List[str]
        """
        return self._target_genes

    @target_genes.setter
    def target_genes(self, target_genes: List[str]):
        """Sets the target_genes of this Protein.


        :param target_genes: The target_genes of this Protein.
        :type target_genes: List[str]
        """

        self._target_genes = target_genes

    @property
    def validation_status(self) -> str:
        """Gets the validation_status of this Protein.


        :return: The validation_status of this Protein.
        :rtype: str
        """
        return self._validation_status

    @validation_status.setter
    def validation_status(self, validation_status: str):
        """Sets the validation_status of this Protein.


        :param validation_status: The validation_status of this Protein.
        :type validation_status: str
        """

        self._validation_status = validation_status

    @property
    def company(self) -> str:
        """Gets the company of this Protein.


        :return: The company of this Protein.
        :rtype: str
        """
        return self._company

    @company.setter
    def company(self, company: str):
        """Sets the company of this Protein.


        :param company: The company of this Protein.
        :type company: str
        """

        self._company = company

    @property
    def catalog_number(self) -> str:
        """Gets the catalog_number of this Protein.


        :return: The catalog_number of this Protein.
        :rtype: str
        """
        return self._catalog_number

    @catalog_number.setter
    def catalog_number(self, catalog_number: str):
        """Sets the catalog_number of this Protein.


        :param catalog_number: The catalog_number of this Protein.
        :type catalog_number: str
        """

        self._catalog_number = catalog_number
