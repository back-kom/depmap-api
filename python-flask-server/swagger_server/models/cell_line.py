# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class CellLine(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(self, depmap_id: str=None, stripped_cell_line_name: str=None, ccle_name: str=None, aliases: List[str]=None, cosmic_id: str=None, sanger_id: str=None, disease: str=None, disease_subtype: str=None, disease_sub_subtype: str=None, gender: str=None, source: str=None):  # noqa: E501
        """CellLine - a model defined in Swagger

        :param depmap_id: The depmap_id of this CellLine.  # noqa: E501
        :type depmap_id: str
        :param stripped_cell_line_name: The stripped_cell_line_name of this CellLine.  # noqa: E501
        :type stripped_cell_line_name: str
        :param ccle_name: The ccle_name of this CellLine.  # noqa: E501
        :type ccle_name: str
        :param aliases: The aliases of this CellLine.  # noqa: E501
        :type aliases: List[str]
        :param cosmic_id: The cosmic_id of this CellLine.  # noqa: E501
        :type cosmic_id: str
        :param sanger_id: The sanger_id of this CellLine.  # noqa: E501
        :type sanger_id: str
        :param disease: The disease of this CellLine.  # noqa: E501
        :type disease: str
        :param disease_subtype: The disease_subtype of this CellLine.  # noqa: E501
        :type disease_subtype: str
        :param disease_sub_subtype: The disease_sub_subtype of this CellLine.  # noqa: E501
        :type disease_sub_subtype: str
        :param gender: The gender of this CellLine.  # noqa: E501
        :type gender: str
        :param source: The source of this CellLine.  # noqa: E501
        :type source: str
        """
        self.swagger_types = {
            'depmap_id': str,
            'stripped_cell_line_name': str,
            'ccle_name': str,
            'aliases': List[str],
            'cosmic_id': str,
            'sanger_id': str,
            'disease': str,
            'disease_subtype': str,
            'disease_sub_subtype': str,
            'gender': str,
            'source': str
        }

        self.attribute_map = {
            'depmap_id': 'depmap_id',
            'stripped_cell_line_name': 'stripped_cell_line_name',
            'ccle_name': 'ccle_name',
            'aliases': 'aliases',
            'cosmic_id': 'cosmic_id',
            'sanger_id': 'sanger_id',
            'disease': 'disease',
            'disease_subtype': 'disease_subtype',
            'disease_sub_subtype': 'disease_sub_subtype',
            'gender': 'gender',
            'source': 'source'
        }

        self._depmap_id = depmap_id
        self._stripped_cell_line_name = stripped_cell_line_name
        self._ccle_name = ccle_name
        self._aliases = aliases
        self._cosmic_id = cosmic_id
        self._sanger_id = sanger_id
        self._disease = disease
        self._disease_subtype = disease_subtype
        self._disease_sub_subtype = disease_sub_subtype
        self._gender = gender
        self._source = source

    @classmethod
    def from_dict(cls, dikt) -> 'CellLine':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The cell_line of this CellLine.  # noqa: E501
        :rtype: CellLine
        """
        return util.deserialize_model(dikt, cls)

    @property
    def depmap_id(self) -> str:
        """Gets the depmap_id of this CellLine.


        :return: The depmap_id of this CellLine.
        :rtype: str
        """
        return self._depmap_id

    @depmap_id.setter
    def depmap_id(self, depmap_id: str):
        """Sets the depmap_id of this CellLine.


        :param depmap_id: The depmap_id of this CellLine.
        :type depmap_id: str
        """

        self._depmap_id = depmap_id

    @property
    def stripped_cell_line_name(self) -> str:
        """Gets the stripped_cell_line_name of this CellLine.


        :return: The stripped_cell_line_name of this CellLine.
        :rtype: str
        """
        return self._stripped_cell_line_name

    @stripped_cell_line_name.setter
    def stripped_cell_line_name(self, stripped_cell_line_name: str):
        """Sets the stripped_cell_line_name of this CellLine.


        :param stripped_cell_line_name: The stripped_cell_line_name of this CellLine.
        :type stripped_cell_line_name: str
        """

        self._stripped_cell_line_name = stripped_cell_line_name

    @property
    def ccle_name(self) -> str:
        """Gets the ccle_name of this CellLine.


        :return: The ccle_name of this CellLine.
        :rtype: str
        """
        return self._ccle_name

    @ccle_name.setter
    def ccle_name(self, ccle_name: str):
        """Sets the ccle_name of this CellLine.


        :param ccle_name: The ccle_name of this CellLine.
        :type ccle_name: str
        """

        self._ccle_name = ccle_name

    @property
    def aliases(self) -> List[str]:
        """Gets the aliases of this CellLine.


        :return: The aliases of this CellLine.
        :rtype: List[str]
        """
        return self._aliases

    @aliases.setter
    def aliases(self, aliases: List[str]):
        """Sets the aliases of this CellLine.


        :param aliases: The aliases of this CellLine.
        :type aliases: List[str]
        """

        self._aliases = aliases

    @property
    def cosmic_id(self) -> str:
        """Gets the cosmic_id of this CellLine.


        :return: The cosmic_id of this CellLine.
        :rtype: str
        """
        return self._cosmic_id

    @cosmic_id.setter
    def cosmic_id(self, cosmic_id: str):
        """Sets the cosmic_id of this CellLine.


        :param cosmic_id: The cosmic_id of this CellLine.
        :type cosmic_id: str
        """

        self._cosmic_id = cosmic_id

    @property
    def sanger_id(self) -> str:
        """Gets the sanger_id of this CellLine.


        :return: The sanger_id of this CellLine.
        :rtype: str
        """
        return self._sanger_id

    @sanger_id.setter
    def sanger_id(self, sanger_id: str):
        """Sets the sanger_id of this CellLine.


        :param sanger_id: The sanger_id of this CellLine.
        :type sanger_id: str
        """

        self._sanger_id = sanger_id

    @property
    def disease(self) -> str:
        """Gets the disease of this CellLine.


        :return: The disease of this CellLine.
        :rtype: str
        """
        return self._disease

    @disease.setter
    def disease(self, disease: str):
        """Sets the disease of this CellLine.


        :param disease: The disease of this CellLine.
        :type disease: str
        """

        self._disease = disease

    @property
    def disease_subtype(self) -> str:
        """Gets the disease_subtype of this CellLine.


        :return: The disease_subtype of this CellLine.
        :rtype: str
        """
        return self._disease_subtype

    @disease_subtype.setter
    def disease_subtype(self, disease_subtype: str):
        """Sets the disease_subtype of this CellLine.


        :param disease_subtype: The disease_subtype of this CellLine.
        :type disease_subtype: str
        """

        self._disease_subtype = disease_subtype

    @property
    def disease_sub_subtype(self) -> str:
        """Gets the disease_sub_subtype of this CellLine.


        :return: The disease_sub_subtype of this CellLine.
        :rtype: str
        """
        return self._disease_sub_subtype

    @disease_sub_subtype.setter
    def disease_sub_subtype(self, disease_sub_subtype: str):
        """Sets the disease_sub_subtype of this CellLine.


        :param disease_sub_subtype: The disease_sub_subtype of this CellLine.
        :type disease_sub_subtype: str
        """

        self._disease_sub_subtype = disease_sub_subtype

    @property
    def gender(self) -> str:
        """Gets the gender of this CellLine.


        :return: The gender of this CellLine.
        :rtype: str
        """
        return self._gender

    @gender.setter
    def gender(self, gender: str):
        """Sets the gender of this CellLine.


        :param gender: The gender of this CellLine.
        :type gender: str
        """

        self._gender = gender

    @property
    def source(self) -> str:
        """Gets the source of this CellLine.


        :return: The source of this CellLine.
        :rtype: str
        """
        return self._source

    @source.setter
    def source(self, source: str):
        """Sets the source of this CellLine.


        :param source: The source of this CellLine.
        :type source: str
        """

        self._source = source
